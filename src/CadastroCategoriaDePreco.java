/*
 * using dbDesign9
 */

/*
 * i'm only using the comboBoxCategoriaDePrecoDataList code as a lazy way to check if the DB already
 * has a priceCategory with the same description, i just copied the code from the
 * AlterarCategoriaDePreco.java where it was actually used for the comboBox.
 */

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class CadastroCategoriaDePreco extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxCategoriaDePrecoDataList;

    private DefaultListModel listPrecosModel;


    public CadastroCategoriaDePreco() {
        comboBoxCategoriaDePrecoDataList = new Vector();

        initComponents();

        listPrecosModel = new DefaultListModel();
        listPrecos.setModel(listPrecosModel);

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_PRICE_CATEGORY"
                    + " ORDER BY PRI_CAT_DESCRIPTION");
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                PriceCategoryTable currentPriceCategory = new PriceCategoryTable(
                        rs.getInt("PRI_CAT_ID"),
                        rs.getString("PRI_CAT_DESCRIPTION"),
                        rs.getString("PRI_CAT_NOTES"),
                        rs.getInt("PRI_CAT_AMOUNT_OF_MOVIES_USING"),
                        rs.getInt("PRI_CAT_ACTIVE"),
                        rs.getLong("PRI_CAT_FINE_PRICE"),
                        rs.getInt("PRI_CAT_MULTIPLY_BY")
                );
                comboBoxCategoriaDePrecoDataList.add(currentPriceCategory);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        buttonFinalizarCadastro = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        labelDescricao = new javax.swing.JLabel();
        labelAnotacoes = new javax.swing.JLabel();
        textFieldDescricao = new javax.swing.JTextField();
        labelNovoPreco = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaAnotacoes = new javax.swing.JTextArea();
        labelPrecos = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPrecos = new javax.swing.JList<>();
        buttonAdicionarPreco = new javax.swing.JButton();
        buttonRemoverPreco = new javax.swing.JButton();
        labelDias = new javax.swing.JLabel();
        labelValueDias = new javax.swing.JLabel();
        buttonMenosDias = new javax.swing.JButton();
        buttonMaisDias = new javax.swing.JButton();
        labelValor = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        buttonCancelarCadastro = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        labelDevolucaoAtrasada = new javax.swing.JLabel();
        labelPrecosDosDiasMultiplicadosPor = new javax.swing.JLabel();
        labelValorDaMulta = new javax.swing.JLabel();
        buttonPrecosMultiplicadosMenos = new javax.swing.JButton();
        labelValuePrecosDosDiasMultiplicadosPor = new javax.swing.JLabel();
        buttonPrecosMultiplicadosMais = new javax.swing.JButton();
        formattedTextFieldValor = new javax.swing.JFormattedTextField();
        formattedTextFieldFinePrice = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(814, 667));

        jPanel1.setPreferredSize(new java.awt.Dimension(814, 907));

        buttonFinalizarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarCadastro.setText("Finalizar Cadastro");
        buttonFinalizarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarCadastroActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Cadastro de Categoria de Preço");

        labelDescricao.setText("* Descrição :");

        labelAnotacoes.setText("Novas Anotações :");

        labelNovoPreco.setText("Novo Preço :");

        textAreaAnotacoes.setColumns(20);
        textAreaAnotacoes.setRows(5);
        jScrollPane2.setViewportView(textAreaAnotacoes);

        labelPrecos.setText("* Preços :");

        listPrecos.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        listPrecos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 6", "Item 7", "Item 8", "Item 9", "Item 10" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listPrecos);

        buttonAdicionarPreco.setText("Adicionar Preço");
        buttonAdicionarPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAdicionarPrecoActionPerformed(evt);
            }
        });

        buttonRemoverPreco.setText("Remover Preço");
        buttonRemoverPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverPrecoActionPerformed(evt);
            }
        });

        labelDias.setText("Dias :");

        labelValueDias.setText("0");

        buttonMenosDias.setText("-");
        buttonMenosDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMenosDiasActionPerformed(evt);
            }
        });

        buttonMaisDias.setText("+");
        buttonMaisDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMaisDiasActionPerformed(evt);
            }
        });

        labelValor.setText("Valor :    R$");

        jLabel1.setText("  Dias                     Preço  R$                                                Dias Atrasados                      Preço de Cada Dia Atrasado");

        buttonCancelarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarCadastro.setText("Cancelar Cadastro");
        buttonCancelarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarCadastroActionPerformed(evt);
            }
        });

        labelDevolucaoAtrasada.setText("Devolução Atrasada :");

        labelPrecosDosDiasMultiplicadosPor.setText("Preços dos Dias Multiplicados por :");

        labelValorDaMulta.setText("Valor da Multa :   R$");

        buttonPrecosMultiplicadosMenos.setText("-");
        buttonPrecosMultiplicadosMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrecosMultiplicadosMenosActionPerformed(evt);
            }
        });

        labelValuePrecosDosDiasMultiplicadosPor.setText("0");

        buttonPrecosMultiplicadosMais.setText("+");
        buttonPrecosMultiplicadosMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrecosMultiplicadosMaisActionPerformed(evt);
            }
        });

        formattedTextFieldValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00"))));
        formattedTextFieldValor.setText("0.00");

        formattedTextFieldFinePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00"))));
        formattedTextFieldFinePrice.setText("0.00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldDescricao))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonRemoverPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonAdicionarPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelNovoPreco)
                        .addGap(18, 18, 18)
                        .addComponent(labelDias)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelValueDias, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonMenosDias)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonMaisDias)
                        .addGap(96, 96, 96)
                        .addComponent(labelValor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formattedTextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelAnotacoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelDevolucaoAtrasada)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelValorDaMulta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formattedTextFieldFinePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelPrecosDosDiasMultiplicadosPor)
                                .addGap(18, 18, 18)
                                .addComponent(labelValuePrecosDosDiasMultiplicadosPor, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPrecosMultiplicadosMenos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPrecosMultiplicadosMais)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelPrecos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 76, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonCancelarCadastro)
                        .addGap(40, 40, 40)
                        .addComponent(buttonFinalizarCadastro)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescricao)
                    .addComponent(textFieldDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAnotacoes)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNovoPreco)
                            .addComponent(labelDias)
                            .addComponent(labelValueDias)
                            .addComponent(buttonMenosDias)
                            .addComponent(buttonMaisDias)
                            .addComponent(labelValor)
                            .addComponent(formattedTextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelPrecos)
                        .addGap(263, 263, 263)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdicionarPreco)
                    .addComponent(buttonRemoverPreco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDevolucaoAtrasada)
                    .addComponent(labelValorDaMulta)
                    .addComponent(formattedTextFieldFinePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrecosDosDiasMultiplicadosPor)
                    .addComponent(buttonPrecosMultiplicadosMenos)
                    .addComponent(labelValuePrecosDosDiasMultiplicadosPor)
                    .addComponent(buttonPrecosMultiplicadosMais))
                .addGap(14, 14, 14)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonFinalizarCadastro)
                    .addComponent(buttonCancelarCadastro))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonFinalizarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarCadastroActionPerformed
        //trimming a mandatory field, meaning a field that has an "*" preceding the label.
        textFieldDescricao.setText(textFieldDescricao.getText().trim());

        if (formattedTextFieldFinePrice.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Finalizar Cadastro\", favor inserir o valor da multa.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (textFieldDescricao.getText().isEmpty()
                || listPrecos.getModel().getSize() == 0) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (comboBoxCategoriaDePrecoContainsDescription(textFieldDescricao.getText())) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nJá existe uma categoria de preço chamada \"" + textFieldDescricao.getText() + "\" !",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (new BigDecimal(formattedTextFieldFinePrice.getText())
                .compareTo(BigDecimal.ZERO) < 0) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nNão é possível inserir um valor negativo!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (new BigDecimal(formattedTextFieldFinePrice.getText())
                .multiply(new BigDecimal(100))
                .compareTo(new BigDecimal(Long.MAX_VALUE)) >= 0) {

            JOptionPane.showMessageDialog(
                    null,
                    "Favor inserir um valor abaixo de \"R$ " + new BigDecimal(Long.MAX_VALUE).divide(new BigDecimal(100)) + "\"",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja finalizar?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                prepStmt = conn.prepareStatement("INSERT INTO TB_PRICE_CATEGORY("
                        + "PRI_CAT_DESCRIPTION," //1
                        + "PRI_CAT_NOTES," //2
                        + "PRI_CAT_FINE_PRICE," //3
                        + "PRI_CAT_MULTIPLY_BY" //4
                        + ") VALUES(?,?,?,?)");
                prepStmt.setString(1, textFieldDescricao.getText());
                prepStmt.setString(2, textAreaAnotacoes.getText());
                prepStmt.setLong(3,
                        new BigDecimal(formattedTextFieldFinePrice.getText())
                                .multiply(new BigDecimal(100))
                                .longValue()
                );
                prepStmt.setInt(4, Integer.parseInt(labelValuePrecosDosDiasMultiplicadosPor.getText()));
                prepStmt.executeUpdate();

                int priceCategoryID = stmt.executeQuery("SELECT last_insert_rowid()").getInt("last_insert_rowid()");

                //insert each new price for the price category
                for (int i = 0; i < listPrecosModel.getSize(); i++) {
                    PriceTable currentPrice = (PriceTable) listPrecosModel.getElementAt(i);

                    prepStmt = conn.prepareStatement("INSERT INTO TB_PRICE("
                            + "PRI_AMOUNT_OF_DAYS," //1
                            + "PRI_PRICE," //2
                            + "PRI_TB_PRICE_CATEGORY_ID" //3
                            + ") VALUES(?,?,?)");
                    prepStmt.setInt(1, currentPrice.getAmountOfDays());
                    prepStmt.setLong(2, currentPrice.getPrice());
                    prepStmt.setInt(3, priceCategoryID);
                    prepStmt.executeUpdate();
                }

                JOptionPane.showMessageDialog(null, "Cadastro da Categoria de Preço bem sucedido.");
                new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
                super.dispose();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_buttonFinalizarCadastroActionPerformed

    private void buttonRemoverPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverPrecoActionPerformed
        int selectedIndex = listPrecos.getSelectedIndex();

        if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Preço\", favor selecionar um preço da lista de preços, para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover o preço selecionado?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            listPrecosModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverPrecoActionPerformed

    private void buttonAdicionarPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAdicionarPrecoActionPerformed
        int amountOfDaysToInsert = Integer.parseInt(labelValueDias.getText());

        if (formattedTextFieldValor.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Adicionar Preço\", favor inserir um valor.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (listPrecosContainsAmountOfDays(amountOfDaysToInsert)) {

            JOptionPane.showMessageDialog(
                    null,
                    "A lista de preços já possui um preço para " + amountOfDaysToInsert + " dia(s).",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (new BigDecimal(formattedTextFieldValor.getText())
                .compareTo(BigDecimal.ZERO) < 0) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nNão é possível inserir um valor negativo!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (new BigDecimal(formattedTextFieldValor.getText())
                .multiply(new BigDecimal(100))
                .compareTo(new BigDecimal(Long.MAX_VALUE)) >= 0) {

            JOptionPane.showMessageDialog(
                    null,
                    "Favor inserir um valor abaixo de \"R$ " + new BigDecimal(Long.MAX_VALUE).divide(new BigDecimal(100))
                    + "\".\nConsiderando por quanto os preços serão multiplicados no caso de devolução atrasada, o valor deve ser ainda mais baixo!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            //where the new price will be inserted, in the list of prices
            int index = 0;

            /*
             * this loop will find the place to insert the new price, if the list is empty this wont
             * loop and it will insert the new price at index = 0.
             */
            while (index < listPrecosModel.getSize()) {
                if (amountOfDaysToInsert > ((PriceTable) listPrecosModel.getElementAt(index)).getAmountOfDays()) {
                    index++;
                } else {
                    break;
                }
            }

            /*
             * insert the new price already in the right place, therefore there's no need to sort
             * the list.
             */
            listPrecosModel.add(index,
                    new PriceTable(
                            amountOfDaysToInsert,
                            new BigDecimal(formattedTextFieldValor.getText())
                                    .multiply(new BigDecimal(100))
                                    .longValue(),
                            Integer.parseInt(labelValuePrecosDosDiasMultiplicadosPor.getText())
                    )
            );

            //reset the days and value fields
            labelValueDias.setText("0");
            formattedTextFieldValor.setText("0.00");
        }
    }//GEN-LAST:event_buttonAdicionarPrecoActionPerformed

    private void buttonMaisDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMaisDiasActionPerformed
        labelValueDias.setText(Integer.toString(Integer.parseInt(labelValueDias.getText()) + 1));
    }//GEN-LAST:event_buttonMaisDiasActionPerformed

    private void buttonMenosDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMenosDiasActionPerformed
        int currentValue = Integer.parseInt(labelValueDias.getText());

        labelValueDias.setText(Integer.toString(currentValue > 0 ? currentValue - 1 : currentValue));
    }//GEN-LAST:event_buttonMenosDiasActionPerformed

    private void buttonCancelarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarCadastroActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelarCadastroActionPerformed

    private void buttonPrecosMultiplicadosMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrecosMultiplicadosMenosActionPerformed
        int currentValue = Integer.parseInt(labelValuePrecosDosDiasMultiplicadosPor.getText());

        labelValuePrecosDosDiasMultiplicadosPor.setText(
                Integer.toString(currentValue > 0 ? currentValue - 1 : currentValue)
        );

        updateLateReturnPrices();
    }//GEN-LAST:event_buttonPrecosMultiplicadosMenosActionPerformed

    private void buttonPrecosMultiplicadosMaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrecosMultiplicadosMaisActionPerformed
        labelValuePrecosDosDiasMultiplicadosPor.setText(
                Integer.toString(Integer.parseInt(labelValuePrecosDosDiasMultiplicadosPor.getText()) + 1)
        );

        updateLateReturnPrices();
    }//GEN-LAST:event_buttonPrecosMultiplicadosMaisActionPerformed

    /**
     * tests only days, not price or anything else.
     * is not nice to have to create a PriceTable object just to compare their amountOfDays
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * amountOfDays attribute, in the PriceTable object.
     *
     * @param days
     * @return
     */
    private boolean listPrecosContainsAmountOfDays(int days) {
        for (int i = 0; i < listPrecosModel.getSize(); i++) {
            if (((PriceTable) listPrecosModel.getElementAt(i)).getAmountOfDays() == days) {
                return true;
            }
        }

        return false;
    }

    /**
     * updating a local value inside the prices so that they will show the updated late return
     * prices in the list.
     */
    private void updateLateReturnPrices() {
        for (int i = 0; i < listPrecosModel.getSize(); i++) {

            ((PriceTable) listPrecosModel.getElementAt(i))
                    .setMultiplyBy(
                            Integer.parseInt(labelValuePrecosDosDiasMultiplicadosPor.getText())
                    );

        }

        //to refresh the list and show the updated values
        listPrecos.updateUI();
    }

    /**
     * checking if the description is already present in the comboBox list.
     * this comboBox list has all the priceCategories from the DB, priceCategories that are active
     * and inactive, therefore is the same as searching the DB, but faster.
     *
     * is not nice to have to create a PriceCategoryTable object just to compare their description
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * description attribute, in the PriceCategoryTable object.
     *
     * @param description
     * @return
     */
    private boolean comboBoxCategoriaDePrecoContainsDescription(String description) {
        for (int i = 0; i < comboBoxCategoriaDePrecoDataList.size(); i++) {
            PriceCategoryTable currentPriceCategory = (PriceCategoryTable) comboBoxCategoriaDePrecoDataList.get(i);

            if (!currentPriceCategory.isEmptyString()
                    && currentPriceCategory.getDescription().equals(description)) {

                return true;
            }
        }

        return false;
    }

    /**
     * custom dispose() to ask if the user is sure, close the DB connection and call the main GUI
     * again.
     */
    @Override
    public void dispose() {
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
            super.dispose();
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCategoriaDePreco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCategoriaDePreco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCategoriaDePreco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCategoriaDePreco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroCategoriaDePreco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdicionarPreco;
    private javax.swing.JButton buttonCancelarCadastro;
    private javax.swing.JButton buttonFinalizarCadastro;
    private javax.swing.JButton buttonMaisDias;
    private javax.swing.JButton buttonMenosDias;
    private javax.swing.JButton buttonPrecosMultiplicadosMais;
    private javax.swing.JButton buttonPrecosMultiplicadosMenos;
    private javax.swing.JButton buttonRemoverPreco;
    private javax.swing.JFormattedTextField formattedTextFieldFinePrice;
    private javax.swing.JFormattedTextField formattedTextFieldValor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelAnotacoes;
    private javax.swing.JLabel labelDescricao;
    private javax.swing.JLabel labelDevolucaoAtrasada;
    private javax.swing.JLabel labelDias;
    private javax.swing.JLabel labelNovoPreco;
    private javax.swing.JLabel labelPrecos;
    private javax.swing.JLabel labelPrecosDosDiasMultiplicadosPor;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelValor;
    private javax.swing.JLabel labelValorDaMulta;
    private javax.swing.JLabel labelValueDias;
    private javax.swing.JLabel labelValuePrecosDosDiasMultiplicadosPor;
    private javax.swing.JList<String> listPrecos;
    private javax.swing.JTextArea textAreaAnotacoes;
    private javax.swing.JTextField textFieldDescricao;
    // End of variables declaration//GEN-END:variables
}
