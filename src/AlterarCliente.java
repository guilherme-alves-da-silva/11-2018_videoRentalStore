/*
 * using dbDesign9
 */

import com.toedter.calendar.JTextFieldDateEditor;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class AlterarCliente extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxClienteDataList;
    private AutoComboBox comboBoxCliente;
    private DefaultListModel listEnderecosModel;
    private DefaultListModel listTelefonesModel;
    private DefaultListModel listEmailsModel;

    private ArrayList<AddressTable> addressesToRemoveFromDB;
    private ArrayList<PhoneNumberTable> phonesToRemoveFromDB;
    private ArrayList<EmailTable> emailsToRemoveFromDB;

    public AlterarCliente() {
        comboBoxClienteDataList = new Vector();
        comboBoxCliente = new AutoComboBox(comboBoxClienteDataList);

        initComponents();

        listEnderecosModel = new DefaultListModel();
        listEnderecos.setModel(listEnderecosModel);

        listTelefonesModel = new DefaultListModel();
        listTelefones.setModel(listTelefonesModel);

        listEmailsModel = new DefaultListModel();
        listEmails.setModel(listEmailsModel);

        addressesToRemoveFromDB = new ArrayList<AddressTable>();
        phonesToRemoveFromDB = new ArrayList<PhoneNumberTable>();
        emailsToRemoveFromDB = new ArrayList<EmailTable>();

        //it already does the DD/MM/YYYY
        dateChooserNovaDataDeNascimento.setLocale(new Locale("pt", "BR"));

        ((JTextFieldDateEditor) dateChooserNovaDataDeNascimento.getDateEditor()).setEditable(false);

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        comboBoxClienteDataList.add(new ClientTable()); //insert the first empty string
        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_CLIENT"
                    + " ORDER BY CLI_FIRST_NAME"); //and last name as well
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                comboBoxClienteDataList.add(new ClientTable(
                        rs.getInt("CLI_ID"),
                        rs.getString("CLI_FIRST_NAME"),
                        rs.getString("CLI_LAST_NAME"),
                        rs.getString("CLI_CPF"),
                        rs.getLong("CLI_DATE_OF_BIRTH"),
                        rs.getLong("CLI_DATE_OF_ADMISSION"),
                        rs.getInt("CLI_ACTIVE"),
                        rs.getString("CLI_NOTES"),
                        rs.getLong("CLI_DEBT"),
                        rs.getInt("CLI_TOTAL_AMOUNT_OF_MOVIES_RENTED")
                ));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        comboBoxCliente.setDataList(comboBoxClienteDataList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        buttonFinalizarAlteracao = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        labelNovoNome = new javax.swing.JLabel();
        labelNovaDataDeNascimento = new javax.swing.JLabel();
        textFieldNovoPrimeiroNome = new javax.swing.JTextField();
        labelClienteAtivo = new javax.swing.JLabel();
        labelNovasAnotacoes = new javax.swing.JLabel();
        labelBuscarCliente = new javax.swing.JLabel();
        comboBoxCliente = new AutoComboBox(comboBoxClienteDataList);
        textFieldNovoCPF = new javax.swing.JTextField();
        labelIdDoClienteValue = new javax.swing.JLabel();
        labelIdDoCliente = new javax.swing.JLabel();
        labelNovoCpf = new javax.swing.JLabel();
        checkBoxClienteAtivo = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaNovasAnotacoes = new javax.swing.JTextArea();
        labelDevendo = new javax.swing.JLabel();
        labelDevendoValue = new javax.swing.JLabel();
        labelQuantidadeTotalDeFilmesEmprestados = new javax.swing.JLabel();
        labelQuantidadeTotalDeFilmesEmprestadosValue = new javax.swing.JLabel();
        labelNovoSobrenome = new javax.swing.JLabel();
        textFieldNovoSobrenome = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listEnderecos = new javax.swing.JList<>();
        labelEnderecos = new javax.swing.JLabel();
        buttonInserirNovoEndereco = new javax.swing.JButton();
        buttonRemoverEndereco = new javax.swing.JButton();
        labelTelefones = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listTelefones = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        buttonInserirNovoTelefone = new javax.swing.JButton();
        buttonRemoverTelefone = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        labelEmails = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listEmails = new javax.swing.JList<>();
        buttonInserirNovoEmail = new javax.swing.JButton();
        buttonRemoverEmail = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        buttonBuscar = new javax.swing.JButton();
        buttonCancelarAlteracao = new javax.swing.JButton();
        dateChooserNovaDataDeNascimento = new com.toedter.calendar.JDateChooser();
        labelDataDoCadastro = new javax.swing.JLabel();
        labelValueDataDoCadastro = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(817, 679));

        buttonFinalizarAlteracao.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarAlteracao.setText("Finalizar Alteração");
        buttonFinalizarAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarAlteracaoActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Alterar Cliente");

        labelNovoNome.setText("* Novo Primeiro Nome :");

        labelNovaDataDeNascimento.setText("* Nova Data de Nascimento :");

        labelClienteAtivo.setText("Cliente Ativo :");

        labelNovasAnotacoes.setText("Novas Anotações :");

        labelBuscarCliente.setText("* Cliente :");

        comboBoxCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClienteActionPerformed(evt);
            }
        });

        labelIdDoClienteValue.setText("0");

        labelIdDoCliente.setText("ID do Cliente :");

        labelNovoCpf.setText("* Novo CPF :");

        textAreaNovasAnotacoes.setColumns(20);
        textAreaNovasAnotacoes.setRows(5);
        jScrollPane1.setViewportView(textAreaNovasAnotacoes);

        labelDevendo.setText("Devendo :  R$");

        labelDevendoValue.setText("0");

        labelQuantidadeTotalDeFilmesEmprestados.setText("Quantidade Total de Filmes Emprestados :");

        labelQuantidadeTotalDeFilmesEmprestadosValue.setText("0");

        labelNovoSobrenome.setText("* Novo Sobrenome :");

        listEnderecos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listEnderecos);

        labelEnderecos.setText("* Endereços :");

        buttonInserirNovoEndereco.setText("Inserir Novo Endereço");
        buttonInserirNovoEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoEnderecoActionPerformed(evt);
            }
        });

        buttonRemoverEndereco.setText("Remover Endereço");
        buttonRemoverEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverEnderecoActionPerformed(evt);
            }
        });

        labelTelefones.setText("* Telefones :");

        listTelefones.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listTelefones);

        buttonInserirNovoTelefone.setText("Inserir Novo Telefone");
        buttonInserirNovoTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoTelefoneActionPerformed(evt);
            }
        });

        buttonRemoverTelefone.setText("Remover Telefone");
        buttonRemoverTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverTelefoneActionPerformed(evt);
            }
        });

        labelEmails.setText("Emails :");

        listEmails.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listEmails);

        buttonInserirNovoEmail.setText("Inserir Novo Email");
        buttonInserirNovoEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoEmailActionPerformed(evt);
            }
        });

        buttonRemoverEmail.setText("Remover Email");
        buttonRemoverEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverEmailActionPerformed(evt);
            }
        });

        buttonBuscar.setText("Buscar");
        buttonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarActionPerformed(evt);
            }
        });

        buttonCancelarAlteracao.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarAlteracao.setText("Cancelar Alteração");
        buttonCancelarAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAlteracaoActionPerformed(evt);
            }
        });

        labelDataDoCadastro.setText("Data do Cadastro :");

        labelValueDataDoCadastro.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelClienteAtivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxClienteAtivo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelDevendo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDevendoValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNovasAnotacoes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoEmail))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelEmails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverTelefone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoTelefone))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTelefones)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverEndereco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoEndereco))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelEnderecos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelBuscarCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonBuscar))
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelIdDoCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelIdDoClienteValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelQuantidadeTotalDeFilmesEmprestados)
                                .addGap(18, 18, 18)
                                .addComponent(labelQuantidadeTotalDeFilmesEmprestadosValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNovoNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldNovoPrimeiroNome))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNovoSobrenome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldNovoSobrenome))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNovoCpf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldNovoCPF))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNovaDataDeNascimento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateChooserNovaDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator2))
                        .addGap(12, 12, 12))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCancelarAlteracao)
                .addGap(30, 30, 30)
                .addComponent(buttonFinalizarAlteracao)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDataDoCadastro)
                .addGap(18, 18, 18)
                .addComponent(labelValueDataDoCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBuscarCliente)
                            .addComponent(comboBoxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonBuscar))
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelIdDoCliente)
                            .addComponent(labelIdDoClienteValue))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelQuantidadeTotalDeFilmesEmprestados)
                            .addComponent(labelQuantidadeTotalDeFilmesEmprestadosValue))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelDataDoCadastro)
                            .addComponent(labelValueDataDoCadastro))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNovoNome)
                            .addComponent(textFieldNovoPrimeiroNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNovoSobrenome)
                            .addComponent(textFieldNovoSobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNovoCpf)
                            .addComponent(textFieldNovoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(labelNovaDataDeNascimento))
                    .addComponent(dateChooserNovaDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEnderecos)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoEndereco)
                    .addComponent(buttonRemoverEndereco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTelefones)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoTelefone)
                    .addComponent(buttonRemoverTelefone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEmails)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoEmail)
                    .addComponent(buttonRemoverEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelClienteAtivo)
                    .addComponent(checkBoxClienteAtivo))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNovasAnotacoes)
                    .addComponent(jScrollPane1))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDevendo)
                    .addComponent(labelDevendoValue))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonFinalizarAlteracao)
                    .addComponent(buttonCancelarAlteracao))
                .addContainerGap())
        );

        jScrollPane5.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * to be used from the CadastroEndereco GUI.
     *
     * @param newAddress
     */
    public void insertNewAddress(AddressTable newAddress) {
        listEnderecosModel.addElement(newAddress);
    }

    private void buttonFinalizarAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarAlteracaoActionPerformed
        ClientTable selectedClient = (ClientTable) comboBoxCliente.getSelectedItem();

        trimMandatoryFields();

        if (selectedClient.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Finalizar Alteração\", favor selecionar um filme, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (textFieldNovoPrimeiroNome.getText().isEmpty()
                || textFieldNovoCPF.getText().isEmpty()
                || listEnderecosModel.isEmpty()
                || listTelefonesModel.isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (!textFieldNovoCPF.getText().equals(selectedClient.getCpf())
                && comboBoxClienteContainsCPF(textFieldNovoCPF.getText())) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nO CPF \"" + textFieldNovoCPF.getText() + "\" já se encontra registrado!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja finalizar?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                //storing the information in the DB

                //updating TB_CLIENT
                prepStmt = conn.prepareStatement("UPDATE TB_CLIENT SET"
                        + " CLI_FIRST_NAME = ?," //1
                        + " CLI_LAST_NAME = ?," //2
                        + " CLI_CPF = ?," //3
                        + " CLI_DATE_OF_BIRTH = ?," //4
                        + " CLI_ACTIVE = ?," //5
                        + " CLI_NOTES = ?" //6
                        + " WHERE CLI_ID = ?"); //7
                prepStmt.setString(1, textFieldNovoPrimeiroNome.getText());
                prepStmt.setString(2, textFieldNovoSobrenome.getText());
                prepStmt.setString(3, textFieldNovoCPF.getText());
                prepStmt.setLong(4, dateChooserNovaDataDeNascimento.getDate().getTime());
                prepStmt.setInt(5, checkBoxClienteAtivo.isSelected() ? 1 : 0);
                prepStmt.setString(6, textAreaNovasAnotacoes.getText());
                prepStmt.setInt(7, Integer.parseInt(labelIdDoClienteValue.getText()));
                prepStmt.executeUpdate();

                //insert each new address into TB_ADDRESS
                for (int i = 0; i < listEnderecosModel.getSize(); i++) {
                    AddressTable currentAddress = (AddressTable) listEnderecosModel.getElementAt(i);

                    if (currentAddress.isToInsert()) {
                        prepStmt = conn.prepareStatement("INSERT INTO TB_ADDRESS("
                                + "ADD_STREET_NAME," //1
                                + "ADD_HOUSE_NUMBER," //2
                                + "ADD_TYPE_OF_RESIDENCE," //3
                                + "ADD_NEIGHBORHOOD," //4
                                + "ADD_TB_CITY_ID," //5
                                + "ADD_TB_CLIENT_ID" //6
                                + ") VALUES(?,?,?,?,?,?)");
                        prepStmt.setString(1, currentAddress.getStreetName().trim());
                        prepStmt.setString(2, currentAddress.getHouseNumber());
                        prepStmt.setString(3, currentAddress.getTypeOfResidence().trim());
                        prepStmt.setString(4, currentAddress.getNeighborhood().trim());
                        prepStmt.setInt(5, currentAddress.getTbCityId());
                        prepStmt.setInt(6, Integer.parseInt(labelIdDoClienteValue.getText()));
                        prepStmt.executeUpdate();
                    }
                }

                //insert each new phone into TB_PHONE_NUMBER
                for (int i = 0; i < listTelefonesModel.getSize(); i++) {
                    PhoneNumberTable currentPhone = (PhoneNumberTable) listTelefonesModel.getElementAt(i);

                    if (currentPhone.isToInsert()) {
                        prepStmt = conn.prepareStatement("INSERT INTO TB_PHONE_NUMBER("
                                + "PHO_NUM_PHONE_NUMBER," //1
                                + "PHO_NUM_TB_CLIENT_ID" //2
                                + ") VALUES(?,?)");
                        prepStmt.setString(1, currentPhone.getPhoneNumber());
                        prepStmt.setInt(2, Integer.parseInt(labelIdDoClienteValue.getText()));
                        prepStmt.executeUpdate();
                    }
                }

                //insert each new email into TB_EMAIL
                for (int i = 0; i < listEmailsModel.getSize(); i++) {
                    EmailTable currentEmail = (EmailTable) listEmailsModel.getElementAt(i);

                    if (currentEmail.isToInsert()) {
                        prepStmt = conn.prepareStatement("INSERT INTO TB_EMAIL("
                                + "EMA_EMAIL," //1
                                + "EMA_TB_CLIENT_ID" //2
                                + ") VALUES(?,?)");
                        prepStmt.setString(1, currentEmail.getEmail());
                        prepStmt.setInt(2, Integer.parseInt(labelIdDoClienteValue.getText()));
                        prepStmt.executeUpdate();
                    }
                }

                //deleting information in the DB that the user removed from the Client
                //deleting each address that the user removed, from TB_ADDRESS
                for (int i = 0; i < addressesToRemoveFromDB.size(); i++) {
                    prepStmt = conn.prepareStatement("DELETE"
                            + " FROM TB_ADDRESS"
                            + " WHERE ADD_ID = ?");
                    prepStmt.setInt(1, addressesToRemoveFromDB.get(i).getId());
                    prepStmt.executeUpdate();
                }

                //deleting each phone that the user removed, from TB_PHONE_NUMBER
                for (int i = 0; i < phonesToRemoveFromDB.size(); i++) {
                    prepStmt = conn.prepareStatement("DELETE"
                            + " FROM TB_PHONE_NUMBER"
                            + " WHERE PHO_NUM_ID = ?");
                    prepStmt.setInt(1, phonesToRemoveFromDB.get(i).getId());
                    prepStmt.executeUpdate();
                }

                //deleting each email that the user removed, from TB_EMAIL
                for (int i = 0; i < emailsToRemoveFromDB.size(); i++) {
                    prepStmt = conn.prepareStatement("DELETE"
                            + " FROM TB_EMAIL"
                            + " WHERE EMA_ID = ?");
                    prepStmt.setInt(1, emailsToRemoveFromDB.get(i).getId());
                    prepStmt.executeUpdate();
                }

                JOptionPane.showMessageDialog(null, "Alteração do cliente bem sucedida.");
                new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
                super.dispose();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_buttonFinalizarAlteracaoActionPerformed

    /**
     * this is here just to be called from the buttonBuscarActionPerformed, to make sure that
     * something in the comboBox is selected.
     *
     * @param evt
     */
    private void comboBoxClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClienteActionPerformed
        //this was intentional, to make sure it's selected.
    }//GEN-LAST:event_comboBoxClienteActionPerformed

    private void buttonInserirNovoTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoTelefoneActionPerformed
        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Inserir Novo Telefone\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            String phoneNumber;

            do {
                phoneNumber = JOptionPane.showInputDialog("Favor digitar o novo número de telefone:\n(Apenas números, sem espaços ou \"-\")");

                if (phoneNumber == null) {
                    break;
                } else {
                    phoneNumber = phoneNumber.trim();
                }
            } while (!phoneNumber.matches("^[0-9]*$") || phoneNumber.length() < 7);

            if (phoneNumber != null) {
                listTelefonesModel.addElement(new PhoneNumberTable(phoneNumber));
            }
        }
    }//GEN-LAST:event_buttonInserirNovoTelefoneActionPerformed

    private void buttonRemoverEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverEnderecoActionPerformed
        int selectedIndex = listEnderecos.getSelectedIndex();

        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Endereço\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Endereço\", favor selecionar um endereço para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este endereço da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            AddressTable selectedAddress = (AddressTable) listEnderecosModel.get(selectedIndex);

            /*
             * if is not to insert (is not a new item in the list), then it already was in the DB
             * and it must be removed from the DB as well.
             */
            if (!selectedAddress.isToInsert()) {
                addressesToRemoveFromDB.add(selectedAddress);
            }
            listEnderecosModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverEnderecoActionPerformed

    private void buttonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarActionPerformed
        comboBoxClienteActionPerformed(evt); //to make sure it's selected

        ClientTable selectedClient = (ClientTable) comboBoxCliente.getSelectedItem();

        if (selectedClient.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Favor selecionar um cliente para \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            labelIdDoClienteValue.setText(Integer.toString(selectedClient.getId()));
            labelQuantidadeTotalDeFilmesEmprestadosValue.setText(
                    selectedClient.getTotalAmountOfMoviesRented()
                    + " filme(s)"
            );
            labelValueDataDoCadastro.setText(String.format("%1$td / %1$tm / %1$tY", new Date(selectedClient.getDateOfAdmission())));
            textFieldNovoPrimeiroNome.setText(selectedClient.getFirstName());
            textFieldNovoSobrenome.setText(selectedClient.getLastName());
            textFieldNovoCPF.setText(selectedClient.getCpf());
            dateChooserNovaDataDeNascimento.setDate(new Date(selectedClient.getDateOfBirth()));
            checkBoxClienteAtivo.setSelected(selectedClient.getActive() == 1);
            textAreaNovasAnotacoes.setText(selectedClient.getNotes());
            labelDevendoValue.setText(
                    new DecimalFormat("#0.00").format(
                            BigDecimal.valueOf(selectedClient.getDebt())
                                    .divide(new BigDecimal(100)))
            );

            try {
                //populate the enderecos list
                listEnderecosModel.clear();

                //get TB_ADDRESS data
                prepStmt = conn.prepareStatement("SELECT *"
                        + " FROM TB_ADDRESS"
                        + " WHERE ADD_TB_CLIENT_ID LIKE ?"); //1
                prepStmt.setInt(1, selectedClient.getId());
                rs = prepStmt.executeQuery();

                while (rs.next()) {
                    listEnderecosModel.addElement(new AddressTable(
                            rs.getInt("ADD_ID"),
                            rs.getString("ADD_STREET_NAME"),
                            rs.getString("ADD_HOUSE_NUMBER"),
                            rs.getString("ADD_TYPE_OF_RESIDENCE"),
                            rs.getString("ADD_NEIGHBORHOOD"),
                            rs.getInt("ADD_TB_CITY_ID")));
                }

                //get city and state of each address
                for (int i = 0; i < listEnderecosModel.getSize(); i++) {
                    AddressTable currentAddress = (AddressTable) listEnderecosModel.getElementAt(i);

                    //get TB_CITY data
                    prepStmt = conn.prepareStatement("SELECT CIT_NAME,"
                            + " CIT_TB_STATE_ID"
                            + " FROM TB_CITY"
                            + " WHERE CIT_ID = ?"); //1
                    prepStmt.setInt(1, currentAddress.getTbCityId());
                    rs = prepStmt.executeQuery();
                    currentAddress.setCityName(rs.getString("CIT_NAME"));

                    //get TB_STATE data
                    prepStmt = conn.prepareStatement("SELECT STA_NAME"
                            + " FROM TB_STATE"
                            + " WHERE STA_ID = ?"); //1
                    prepStmt.setInt(1, rs.getInt("CIT_TB_STATE_ID"));
                    rs = prepStmt.executeQuery();
                    currentAddress.setStateName(rs.getString("STA_NAME"));
                }

                //populate the phones list
                listTelefonesModel.clear();

                //get TB_PHONE_NUMBER data
                prepStmt = conn.prepareStatement("SELECT PHO_NUM_ID,"
                        + " PHO_NUM_PHONE_NUMBER"
                        + " FROM TB_PHONE_NUMBER"
                        + " WHERE PHO_NUM_TB_CLIENT_ID = ?"); //1
                prepStmt.setInt(1, selectedClient.getId());
                rs = prepStmt.executeQuery();

                while (rs.next()) {
                    listTelefonesModel.addElement(new PhoneNumberTable(
                            rs.getInt("PHO_NUM_ID"),
                            rs.getString("PHO_NUM_PHONE_NUMBER")));
                }

                //populate the emails list
                listEmailsModel.clear();

                //get TB_EMAIL data
                prepStmt = conn.prepareStatement("SELECT EMA_ID,"
                        + " EMA_EMAIL"
                        + " FROM TB_EMAIL"
                        + " WHERE EMA_TB_CLIENT_ID = ?"); //1
                prepStmt.setInt(1, selectedClient.getId());
                rs = prepStmt.executeQuery();

                while (rs.next()) {
                    listEmailsModel.addElement(new EmailTable(
                            rs.getInt("EMA_ID"),
                            rs.getString("EMA_EMAIL")));
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_buttonBuscarActionPerformed

    private void buttonCancelarAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAlteracaoActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelarAlteracaoActionPerformed

    private void buttonInserirNovoEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoEnderecoActionPerformed
        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Inserir Novo Endereço\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            CadastroEndereco addr = new CadastroEndereco();
            addr.setLocalAlterarCliente(this);
            addr.setVisible(true);
        }
    }//GEN-LAST:event_buttonInserirNovoEnderecoActionPerformed

    private void buttonInserirNovoEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoEmailActionPerformed
        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Inserir Novo Email\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            String email;

            do {
                email = JOptionPane.showInputDialog("Favor digitar o novo email:");

                if (email == null) {
                    break;
                } else {
                    email = email.trim();
                }
            } while (email.length() < 1);

            if (email != null) {
                listEmailsModel.addElement(new EmailTable(email));
            }
        }
    }//GEN-LAST:event_buttonInserirNovoEmailActionPerformed

    private void buttonRemoverTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverTelefoneActionPerformed
        int selectedIndex = listTelefones.getSelectedIndex();

        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Telefone\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Telefone\", favor selecionar um telefone para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este telefone da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            PhoneNumberTable selectedPhone = (PhoneNumberTable) listTelefonesModel.get(selectedIndex);

            /*
             * if is not to insert (is not a new item in the list), then it already was in the DB
             * and it must be removed from the DB as well.
             */
            if (!selectedPhone.isToInsert()) {
                phonesToRemoveFromDB.add(selectedPhone);
            }
            listTelefonesModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverTelefoneActionPerformed

    private void buttonRemoverEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverEmailActionPerformed
        int selectedIndex = listEmails.getSelectedIndex();

        if (((ClientTable) comboBoxCliente.getSelectedItem()).isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Email\", favor selecionar um cliente, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Email\", favor selecionar um email para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este email da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            EmailTable selectedEmail = (EmailTable) listEmailsModel.get(selectedIndex);

            /*
             * if is not to insert (is not a new item in the list), then it already was in the DB
             * and it must be removed from the DB as well.
             */
            if (!selectedEmail.isToInsert()) {
                emailsToRemoveFromDB.add(selectedEmail);
            }
            listEmailsModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverEmailActionPerformed

    /**
     * checking if the CPF is already present in the comboBox list.
     * this comboBox list has all the clients from the DB, clients that are active and
     * inactive, therefore is the same as searching the DB, but faster.
     *
     * is not nice to have to create a ClientTable object just to compare their CPF
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * CPF attribute, in the ClientTable object.
     *
     * @param cpf
     * @return
     */
    private boolean comboBoxClienteContainsCPF(String cpf) {
        for (int i = 0; i < comboBoxClienteDataList.size(); i++) {
            ClientTable currentClient = (ClientTable) comboBoxClienteDataList.get(i);

            if (!currentClient.isEmptyString()
                    && currentClient.getCpf().equals(cpf)) {

                return true;
            }
        }

        return false;
    }

    /**
     * trimming the fields that are mandatory\obligatory, meaning the fields that have an "*"
     * preceding their label.
     */
    private void trimMandatoryFields() {
        textFieldNovoPrimeiroNome.setText(textFieldNovoPrimeiroNome.getText().trim());
        textFieldNovoSobrenome.setText(textFieldNovoSobrenome.getText().trim());
        textFieldNovoCPF.setText(textFieldNovoCPF.getText().trim());
    }

    /**
     * custom dispose() to ask if the user is sure, close the DB connection and call the main GUI
     * again.
     */
    @Override
    public void dispose() {
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
            super.dispose();
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlterarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlterarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlterarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlterarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlterarCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBuscar;
    private javax.swing.JButton buttonCancelarAlteracao;
    private javax.swing.JButton buttonFinalizarAlteracao;
    private javax.swing.JButton buttonInserirNovoEmail;
    private javax.swing.JButton buttonInserirNovoEndereco;
    private javax.swing.JButton buttonInserirNovoTelefone;
    private javax.swing.JButton buttonRemoverEmail;
    private javax.swing.JButton buttonRemoverEndereco;
    private javax.swing.JButton buttonRemoverTelefone;
    private javax.swing.JCheckBox checkBoxClienteAtivo;
//    private javax.swing.JComboBox<ClientTable> comboBoxCliente;
    private com.toedter.calendar.JDateChooser dateChooserNovaDataDeNascimento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel labelBuscarCliente;
    private javax.swing.JLabel labelClienteAtivo;
    private javax.swing.JLabel labelDataDoCadastro;
    private javax.swing.JLabel labelDevendo;
    private javax.swing.JLabel labelDevendoValue;
    private javax.swing.JLabel labelEmails;
    private javax.swing.JLabel labelEnderecos;
    private javax.swing.JLabel labelIdDoCliente;
    private javax.swing.JLabel labelIdDoClienteValue;
    private javax.swing.JLabel labelNovaDataDeNascimento;
    private javax.swing.JLabel labelNovasAnotacoes;
    private javax.swing.JLabel labelNovoCpf;
    private javax.swing.JLabel labelNovoNome;
    private javax.swing.JLabel labelNovoSobrenome;
    private javax.swing.JLabel labelQuantidadeTotalDeFilmesEmprestados;
    private javax.swing.JLabel labelQuantidadeTotalDeFilmesEmprestadosValue;
    private javax.swing.JLabel labelTelefones;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelValueDataDoCadastro;
    private javax.swing.JList<String> listEmails;
    private javax.swing.JList<String> listEnderecos;
    private javax.swing.JList<String> listTelefones;
    private javax.swing.JTextArea textAreaNovasAnotacoes;
    private javax.swing.JTextField textFieldNovoCPF;
    private javax.swing.JTextField textFieldNovoPrimeiroNome;
    private javax.swing.JTextField textFieldNovoSobrenome;
    // End of variables declaration//GEN-END:variables
}
