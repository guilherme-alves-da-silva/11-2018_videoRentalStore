/*
 * using dbDesign9
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;

public class AlterarFormaDePagamento extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxFormaDePagamentoDataList;
    private AutoComboBox comboBoxFormaDePagamento;

    public AlterarFormaDePagamento() {
        comboBoxFormaDePagamentoDataList = new Vector();
        comboBoxFormaDePagamento = new AutoComboBox(comboBoxFormaDePagamentoDataList);

        initComponents();

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        comboBoxFormaDePagamentoDataList.add(new PaymentFormTable()); //insert the first empty string
        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_PAYMENT_FORM"
                    + " ORDER BY PAY_FOR_DESCRIPTION");
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                comboBoxFormaDePagamentoDataList.add(new PaymentFormTable(
                        rs.getInt("PAY_FOR_ID"),
                        rs.getString("PAY_FOR_DESCRIPTION"),
                        rs.getString("PAY_FOR_NOTES"),
                        rs.getInt("PAY_FOR_ACTIVE")
                ));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        comboBoxFormaDePagamento.setDataList(comboBoxFormaDePagamentoDataList);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        labelNovaDescricao = new javax.swing.JLabel();
        textFieldNovaDescricao = new javax.swing.JTextField();
        labelNovasAnotacoes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaNovasAnotacoes = new javax.swing.JTextArea();
        buttonCancelarAlteracao = new javax.swing.JButton();
        buttonFinalizarAlteracao = new javax.swing.JButton();
        labelFormaDePagamentoAtiva = new javax.swing.JLabel();
        checkBoxFormaDePagamentoAtiva = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        comboBoxFormaDePagamento = comboBoxFormaDePagamento = new AutoComboBox(comboBoxFormaDePagamentoDataList);
        buttonBuscar = new javax.swing.JButton();
        labelFormaDePagamento = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Alterar Forma de Pagamento");

        labelNovaDescricao.setText("* Nova Descrição :");

        labelNovasAnotacoes.setText("Novas Anotações :");

        textAreaNovasAnotacoes.setColumns(20);
        textAreaNovasAnotacoes.setRows(5);
        jScrollPane1.setViewportView(textAreaNovasAnotacoes);

        buttonCancelarAlteracao.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarAlteracao.setText("Cancelar Alteração");
        buttonCancelarAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAlteracaoActionPerformed(evt);
            }
        });

        buttonFinalizarAlteracao.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarAlteracao.setText("Finalizar Alteração");
        buttonFinalizarAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarAlteracaoActionPerformed(evt);
            }
        });

        labelFormaDePagamentoAtiva.setText("Forma de Pagamento Ativa :");

        comboBoxFormaDePagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxFormaDePagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxFormaDePagamentoActionPerformed(evt);
            }
        });

        buttonBuscar.setText("Buscar");
        buttonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarActionPerformed(evt);
            }
        });

        labelFormaDePagamento.setText("* Forma de Pagamento :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNovaDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldNovaDescricao))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNovasAnotacoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFormaDePagamentoAtiva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxFormaDePagamentoAtiva)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFormaDePagamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxFormaDePagamento, 0, 395, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addComponent(buttonBuscar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonCancelarAlteracao)
                        .addGap(31, 31, 31)
                        .addComponent(buttonFinalizarAlteracao)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxFormaDePagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBuscar)
                    .addComponent(labelFormaDePagamento))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNovaDescricao)
                    .addComponent(textFieldNovaDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFormaDePagamentoAtiva)
                    .addComponent(checkBoxFormaDePagamentoAtiva))
                .addGap(15, 15, 15)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNovasAnotacoes)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancelarAlteracao)
                    .addComponent(buttonFinalizarAlteracao))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonFinalizarAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarAlteracaoActionPerformed
        PaymentFormTable selectedPaymentForm = (PaymentFormTable) comboBoxFormaDePagamento.getSelectedItem();

        //trimming
        textFieldNovaDescricao.setText(textFieldNovaDescricao.getText().trim());

        if (selectedPaymentForm.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Finalizar Alteração\", favor selecionar uma forma de pagamento, e clicar em \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (textFieldNovaDescricao.getText().isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (!textFieldNovaDescricao.getText().equals(selectedPaymentForm.getDescription())
                && comboBoxFormaDePagamentoContainsDescription(textFieldNovaDescricao.getText())) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nJá existe uma categoria de filme chamada \"" + textFieldNovaDescricao.getText() + "\" !",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja finalizar?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                //updating TB_PAYMENT_FORM
                prepStmt = conn.prepareStatement("UPDATE TB_PAYMENT_FORM SET"
                        + " PAY_FOR_DESCRIPTION = ?," //1
                        + " PAY_FOR_NOTES = ?," //2
                        + " PAY_FOR_ACTIVE = ?" //3
                        + " WHERE PAY_FOR_ID = ?"); //4
                prepStmt.setString(1, textFieldNovaDescricao.getText());
                prepStmt.setString(2, textAreaNovasAnotacoes.getText());
                prepStmt.setInt(3, checkBoxFormaDePagamentoAtiva.isSelected() ? 1 : 0);
                prepStmt.setInt(4, selectedPaymentForm.getId());
                prepStmt.executeUpdate();

                JOptionPane.showMessageDialog(null, "Alteração da Forma de Pagamento bem sucedida.");
                new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
                super.dispose();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_buttonFinalizarAlteracaoActionPerformed

    private void buttonCancelarAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAlteracaoActionPerformed
        //ask if the user is sure
        dispose();
    }//GEN-LAST:event_buttonCancelarAlteracaoActionPerformed

    private void buttonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarActionPerformed
        comboBoxFormaDePagamentoActionPerformed(evt); //to make sure it's selected

        PaymentFormTable selectedPaymentForm = (PaymentFormTable) comboBoxFormaDePagamento.getSelectedItem();

        if (selectedPaymentForm.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "Favor selecionar uma forma de pagamento para \"Buscar\".",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            textFieldNovaDescricao.setText(selectedPaymentForm.getDescription());
            checkBoxFormaDePagamentoAtiva.setSelected(selectedPaymentForm.getActive() == 1);
            textAreaNovasAnotacoes.setText(selectedPaymentForm.getNotes());
        }
    }//GEN-LAST:event_buttonBuscarActionPerformed

    private void comboBoxFormaDePagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFormaDePagamentoActionPerformed
        //this was intentional, to make sure it's selected.
    }//GEN-LAST:event_comboBoxFormaDePagamentoActionPerformed

    /**
     * checking if the description is already present in the comboBox list.
     * this comboBox list has all the paymentForms from the DB, paymentForms that are active
     * and inactive, therefore is the same as searching the DB, but faster.
     *
     * is not nice to have to create a PaymentFormTable object just to compare their description
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * description attribute, in the PaymentFormTable object.
     *
     * @param description
     * @return
     */
    private boolean comboBoxFormaDePagamentoContainsDescription(String description) {
        for (int i = 0; i < comboBoxFormaDePagamentoDataList.size(); i++) {
            PaymentFormTable currentPaymentForm = (PaymentFormTable) comboBoxFormaDePagamentoDataList.get(i);

            if (!currentPaymentForm.isEmptyString()
                    && currentPaymentForm.getDescription().equals(description)) {

                return true;
            }
        }

        return false;
    }

    /**
     * custom dispose() to ask if the user is sure, close the DB connection and call the main GUI
     * again.
     */
    @Override
    public void dispose() {
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
            super.dispose();
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlterarFormaDePagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlterarFormaDePagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlterarFormaDePagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlterarFormaDePagamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlterarFormaDePagamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBuscar;
    private javax.swing.JButton buttonCancelarAlteracao;
    private javax.swing.JButton buttonFinalizarAlteracao;
    private javax.swing.JCheckBox checkBoxFormaDePagamentoAtiva;
 //   private javax.swing.JComboBox<String> comboBoxFormaDePagamento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelFormaDePagamento;
    private javax.swing.JLabel labelFormaDePagamentoAtiva;
    private javax.swing.JLabel labelNovaDescricao;
    private javax.swing.JLabel labelNovasAnotacoes;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextArea textAreaNovasAnotacoes;
    private javax.swing.JTextField textFieldNovaDescricao;
    // End of variables declaration//GEN-END:variables
}
