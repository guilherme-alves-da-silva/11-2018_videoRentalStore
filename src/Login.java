/*
 * NEEDS REFACTORING
 *
 * using dbDesign9
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

public class Login extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    public Login() {
        initComponents();

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        textFieldUsuario = new javax.swing.JTextField();
        labelSenha = new javax.swing.JLabel();
        passwordFieldSenha = new javax.swing.JPasswordField();
        buttonEnter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Gerenciador de Empréstimos de Filmes");

        labelUsuario.setText("* Usuário :");

        textFieldUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldUsuarioActionPerformed(evt);
            }
        });

        labelSenha.setText("* Senha :");

        passwordFieldSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldSenhaActionPerformed(evt);
            }
        });

        buttonEnter.setText("Entrar");
        buttonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSenha)
                            .addComponent(labelUsuario))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(textFieldUsuario))
                            .addComponent(passwordFieldSenha)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(22, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonEnter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsuario)
                    .addComponent(textFieldUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSenha)
                    .addComponent(passwordFieldSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(buttonEnter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * checking with the DB if the login and password are valid. if they are, then call the next
     * GUI.
     */
    private void logIntoTheSystem() {
        char[] passwordCharArray = passwordFieldSenha.getPassword();
        String password = "";
        for (int i = 0; i < passwordCharArray.length; i++) {
            password += passwordCharArray[i];
        }

        //trimming
        String user = textFieldUsuario.getText().trim();
        password = password.trim();

        if (user.isEmpty()
                || password.isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            //REFACTOR ALL THESE DB QUERIES, STORING EACH DB COLUMN IN STRINGS\INT

            try {
                //just getting the password
                prepStmt = conn.prepareStatement("SELECT LOG_PASSWORD"
                        + " FROM TB_LOGIN"
                        + " WHERE LOG_LOGIN LIKE ?"); //1
                prepStmt.setString(1, user);
                rs = prepStmt.executeQuery();

                if (!rs.next()) {
                    JOptionPane.showMessageDialog(
                            null,
                            "ERRO!\nUsuário \"" + user + "\" não encontrado!",
                            "Aviso",
                            JOptionPane.WARNING_MESSAGE
                    );

                } else {
                    boolean passwordFound = rs.getString("LOG_PASSWORD").equals(password);

                    //checking if the user is active
                    try {
                        prepStmt = conn.prepareStatement("SELECT LOG_TB_USER_TYPE_ID"
                                + " FROM TB_LOGIN"
                                + " WHERE LOG_LOGIN LIKE ?" //1
                                + " AND LOG_ACTIVE = 1");
                        prepStmt.setString(1, user);
                        rs = prepStmt.executeQuery();

                        if (!rs.next()) {
                            JOptionPane.showMessageDialog(
                                    null,
                                    "ERRO!\nO usuário \"" + user + "\" está desativado!",
                                    "Aviso",
                                    JOptionPane.WARNING_MESSAGE
                            );

                        } else if (passwordFound) {
                            int userTypeID = rs.getInt("LOG_TB_USER_TYPE_ID");

                            /*
                             * checking what is the type of the user from TB_USER_TYPE, and calling
                             * the GUI for that user type.
                             */
                            try {
                                prepStmt = conn.prepareStatement("SELECT USE_TYP_DESCRIPTION"
                                        + " FROM TB_USER_TYPE"
                                        + " WHERE USE_TYP_ID LIKE ?"); //1
                                prepStmt.setInt(1, userTypeID);
                                String userTypeDescription = prepStmt.executeQuery().getString("USE_TYP_DESCRIPTION");

                                //ATTENTION: THIS PART OF THE CODE IS CONSIDERING ONLY 2 USER TYPES
                                if (userTypeDescription.equals("standard")) {
                                    new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
                                    dispose();

                                } else if (userTypeDescription.equals("admin")) {
                                    new AdminGerenciadorDeEmprestimosDeFilmes().setVisible(true);
                                    dispose();
                                }
                            } catch (SQLException e) {
                                System.out.println(e.getMessage());
                            } finally {
                                try {
                                    if (conn != null) {
                                        conn.close();
                                    }
                                } catch (Exception e) {
                                    System.out.println(e.getMessage());
                                }
                            }
                        } else if (!passwordFound) {

                            JOptionPane.showMessageDialog(
                                    null,
                                    "ERRO!\nSenha inválida para o usuário \"" + user + "\" !",
                                    "Aviso",
                                    JOptionPane.WARNING_MESSAGE
                            );
                        }
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private void textFieldUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldUsuarioActionPerformed
        logIntoTheSystem();
    }//GEN-LAST:event_textFieldUsuarioActionPerformed

    private void buttonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnterActionPerformed
        logIntoTheSystem();
    }//GEN-LAST:event_buttonEnterActionPerformed

    private void passwordFieldSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldSenhaActionPerformed
        logIntoTheSystem();
    }//GEN-LAST:event_passwordFieldSenhaActionPerformed

    /**
     * custom dispose() to close the DB connection.
     */
    @Override
    public void dispose() {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        super.dispose();
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEnter;
    private javax.swing.JLabel labelSenha;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JPasswordField passwordFieldSenha;
    private javax.swing.JTextField textFieldUsuario;
    // End of variables declaration//GEN-END:variables
}
