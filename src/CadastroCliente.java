/*
 * using dbDesign9
 */

/*
 * i'm only using the comboBoxClienteDataList code as a lazy way to check if the DB already
 * has a client with the same cpf, i just copied the code from the AlterarCliente.java where it was
 * actually used for the comboBox.
 */

import com.toedter.calendar.JTextFieldDateEditor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class CadastroCliente extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxClienteDataList;
    private DefaultListModel listEnderecosModel;
    private DefaultListModel listTelefonesModel;
    private DefaultListModel listEmailsModel;

    public CadastroCliente() {
        comboBoxClienteDataList = new Vector();

        initComponents();

        listEnderecosModel = new DefaultListModel();
        listEnderecos.setModel(listEnderecosModel);

        listTelefonesModel = new DefaultListModel();
        listTelefones.setModel(listTelefonesModel);

        listEmailsModel = new DefaultListModel();
        listEmails.setModel(listEmailsModel);

        //it already does the DD/MM/YYYY
        dateChooserDataDeNascimento.setLocale(new Locale("pt", "BR"));

        ((JTextFieldDateEditor) dateChooserDataDeNascimento.getDateEditor()).setEditable(false);

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_CLIENT"
                    + " ORDER BY CLI_FIRST_NAME"); //and last name as well
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                comboBoxClienteDataList.add(new ClientTable(
                        rs.getInt("CLI_ID"),
                        rs.getString("CLI_FIRST_NAME"),
                        rs.getString("CLI_LAST_NAME"),
                        rs.getString("CLI_CPF"),
                        rs.getLong("CLI_DATE_OF_BIRTH"),
                        rs.getLong("CLI_DATE_OF_ADMISSION"),
                        rs.getInt("CLI_ACTIVE"),
                        rs.getString("CLI_NOTES"),
                        rs.getLong("CLI_DEBT"),
                        rs.getInt("CLI_TOTAL_AMOUNT_OF_MOVIES_RENTED")
                ));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        buttonFinalizarCadastro = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        labelNome = new javax.swing.JLabel();
        labelDataDeNascimento = new javax.swing.JLabel();
        textFieldPrimeiroNome = new javax.swing.JTextField();
        labelAnotacoes = new javax.swing.JLabel();
        textFieldCPF = new javax.swing.JTextField();
        labelCPF = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaAnotacoes = new javax.swing.JTextArea();
        labelSobrenome = new javax.swing.JLabel();
        textFieldSobrenome = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listEnderecos = new javax.swing.JList<>();
        labelEnderecos = new javax.swing.JLabel();
        buttonInserirNovoEndereco = new javax.swing.JButton();
        buttonRemoverEndereco = new javax.swing.JButton();
        labelTelefones = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listTelefones = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        buttonInserirNovoTelefone = new javax.swing.JButton();
        buttonRemoverTelefone = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        labelEmails = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listEmails = new javax.swing.JList<>();
        buttonInserirNovoEmail = new javax.swing.JButton();
        buttonRemoverEmail = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        buttonCancelarCadastro = new javax.swing.JButton();
        dateChooserDataDeNascimento = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(817, 679));

        buttonFinalizarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarCadastro.setText("Finalizar Cadastro");
        buttonFinalizarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarCadastroActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Cadastrar Cliente");

        labelNome.setText("* Primeiro Nome :");

        labelDataDeNascimento.setText("* Data de Nascimento :");

        labelAnotacoes.setText("Anotações :");

        labelCPF.setText("* CPF :");

        textAreaAnotacoes.setColumns(20);
        textAreaAnotacoes.setRows(5);
        jScrollPane1.setViewportView(textAreaAnotacoes);

        labelSobrenome.setText("* Sobrenome :");

        listEnderecos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listEnderecos);

        labelEnderecos.setText("* Endereços :");

        buttonInserirNovoEndereco.setText("Inserir Novo Endereço");
        buttonInserirNovoEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoEnderecoActionPerformed(evt);
            }
        });

        buttonRemoverEndereco.setText("Remover Endereço");
        buttonRemoverEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverEnderecoActionPerformed(evt);
            }
        });

        labelTelefones.setText("* Telefones :");

        listTelefones.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listTelefones);

        buttonInserirNovoTelefone.setText("Inserir Novo Telefone");
        buttonInserirNovoTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoTelefoneActionPerformed(evt);
            }
        });

        buttonRemoverTelefone.setText("Remover Telefone");
        buttonRemoverTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverTelefoneActionPerformed(evt);
            }
        });

        labelEmails.setText("Emails :");

        listEmails.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listEmails);

        buttonInserirNovoEmail.setText("Inserir Novo Email");
        buttonInserirNovoEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirNovoEmailActionPerformed(evt);
            }
        });

        buttonRemoverEmail.setText("Remover Email");
        buttonRemoverEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverEmailActionPerformed(evt);
            }
        });

        buttonCancelarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarCadastro.setText("Cancelar Cadastro");
        buttonCancelarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelAnotacoes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoEmail))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelEmails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverTelefone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoTelefone))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTelefones)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonRemoverEndereco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonInserirNovoEndereco))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelEnderecos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldPrimeiroNome))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelSobrenome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldSobrenome))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelCPF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldCPF))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelDataDeNascimento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateChooserDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator2))
                        .addGap(12, 12, 12))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCancelarCadastro)
                .addGap(30, 30, 30)
                .addComponent(buttonFinalizarCadastro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNome)
                            .addComponent(textFieldPrimeiroNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelSobrenome)
                            .addComponent(textFieldSobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCPF)
                            .addComponent(textFieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(labelDataDeNascimento))
                    .addComponent(dateChooserDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEnderecos)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoEndereco)
                    .addComponent(buttonRemoverEndereco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTelefones)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoTelefone)
                    .addComponent(buttonRemoverTelefone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEmails)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInserirNovoEmail)
                    .addComponent(buttonRemoverEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAnotacoes)
                    .addComponent(jScrollPane1))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonFinalizarCadastro)
                    .addComponent(buttonCancelarCadastro))
                .addContainerGap())
        );

        jScrollPane5.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * to be used from the CadastroEndereco GUI.
     *
     * @param newAddress
     */
    public void insertNewAddress(AddressTable newAddress) {
        listEnderecosModel.addElement(newAddress);
    }

    private void buttonFinalizarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarCadastroActionPerformed
        trimMandatoryFields();

        if (textFieldPrimeiroNome.getText().isEmpty()
                || textFieldCPF.getText().isEmpty()
                || listEnderecosModel.isEmpty()
                || listTelefonesModel.isEmpty()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (comboBoxClienteContainsCPF(textFieldCPF.getText())) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nO CPF \"" + textFieldCPF.getText() + "\" já se encontra registrado!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja finalizar?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                //storing the information in the DB
                prepStmt = conn.prepareStatement("INSERT INTO TB_CLIENT("
                        + "CLI_FIRST_NAME," //1
                        + "CLI_LAST_NAME," //2
                        + "CLI_CPF," //3
                        + "CLI_DATE_OF_BIRTH," //4
                        + "CLI_DATE_OF_ADMISSION," //5
                        + "CLI_NOTES" //6
                        + ") VALUES(?,?,?,?,?,?)");
                prepStmt.setString(1, textFieldPrimeiroNome.getText());
                prepStmt.setString(2, textFieldSobrenome.getText());
                prepStmt.setString(3, textFieldCPF.getText());
                prepStmt.setLong(4, dateChooserDataDeNascimento.getDate().getTime());
                prepStmt.setLong(5, new Date().getTime());
                prepStmt.setString(6, textAreaAnotacoes.getText());
                prepStmt.executeUpdate();

                int clientID = stmt.executeQuery("SELECT last_insert_rowid()").getInt("last_insert_rowid()");

                //insert each new address into TB_ADDRESS
                for (int i = 0; i < listEnderecosModel.getSize(); i++) {
                    AddressTable currentAddress = (AddressTable) listEnderecosModel.getElementAt(i);

                    prepStmt = conn.prepareStatement("INSERT INTO TB_ADDRESS("
                            + "ADD_STREET_NAME," //1
                            + "ADD_HOUSE_NUMBER," //2
                            + "ADD_TYPE_OF_RESIDENCE," //3
                            + "ADD_NEIGHBORHOOD," //4
                            + "ADD_TB_CITY_ID," //5
                            + "ADD_TB_CLIENT_ID" //6
                            + ") VALUES(?,?,?,?,?,?)");
                    prepStmt.setString(1, currentAddress.getStreetName().trim());
                    prepStmt.setString(2, currentAddress.getHouseNumber());
                    prepStmt.setString(3, currentAddress.getTypeOfResidence().trim());
                    prepStmt.setString(4, currentAddress.getNeighborhood().trim());
                    prepStmt.setInt(5, currentAddress.getTbCityId());
                    prepStmt.setInt(6, clientID);
                    prepStmt.executeUpdate();
                }

                //insert each new phone into TB_PHONE_NUMBER
                for (int i = 0; i < listTelefonesModel.getSize(); i++) {
                    PhoneNumberTable currentPhone = (PhoneNumberTable) listTelefonesModel.getElementAt(i);

                    prepStmt = conn.prepareStatement("INSERT INTO TB_PHONE_NUMBER("
                            + "PHO_NUM_PHONE_NUMBER," //1
                            + "PHO_NUM_TB_CLIENT_ID" //2
                            + ") VALUES(?,?)");
                    prepStmt.setString(1, currentPhone.getPhoneNumber());
                    prepStmt.setInt(2, clientID);
                    prepStmt.executeUpdate();
                }

                //insert each new email into TB_EMAIL
                for (int i = 0; i < listEmailsModel.getSize(); i++) {
                    EmailTable currentEmail = (EmailTable) listEmailsModel.getElementAt(i);

                    prepStmt = conn.prepareStatement("INSERT INTO TB_EMAIL("
                            + "EMA_EMAIL," //1
                            + "EMA_TB_CLIENT_ID" //2
                            + ") VALUES(?,?)");
                    prepStmt.setString(1, currentEmail.getEmail());
                    prepStmt.setInt(2, clientID);
                    prepStmt.executeUpdate();
                }

                JOptionPane.showMessageDialog(null, "Cadastro do cliente bem sucedido.");
                new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
                super.dispose();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_buttonFinalizarCadastroActionPerformed

    private void buttonInserirNovoTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoTelefoneActionPerformed
        String phoneNumber;

        do {
            phoneNumber = JOptionPane.showInputDialog("Favor digitar o novo número de telefone:\n(Apenas números, sem espaços ou \"-\")");

            if (phoneNumber == null) {
                break;
            } else {
                phoneNumber = phoneNumber.trim();
            }
        } while (!phoneNumber.matches("^[0-9]*$") || phoneNumber.length() < 7);

        if (phoneNumber != null) {
            listTelefonesModel.addElement(new PhoneNumberTable(phoneNumber));
        }
    }//GEN-LAST:event_buttonInserirNovoTelefoneActionPerformed

    private void buttonRemoverEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverEnderecoActionPerformed
        int selectedIndex = listEnderecos.getSelectedIndex();

        if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Endereço\", favor selecionar um endereço para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este endereço da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            listEnderecosModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverEnderecoActionPerformed

    private void buttonCancelarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarCadastroActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelarCadastroActionPerformed

    private void buttonInserirNovoEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoEnderecoActionPerformed
        CadastroEndereco addr = new CadastroEndereco();
        addr.setLocalCadastroCliente(this);
        addr.setVisible(true);
    }//GEN-LAST:event_buttonInserirNovoEnderecoActionPerformed

    private void buttonInserirNovoEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirNovoEmailActionPerformed
        String email;

        do {
            email = JOptionPane.showInputDialog("Favor digitar o novo email:");

            if (email == null) {
                break;
            } else {
                email = email.trim();
            }
        } while (email.length() < 1);

        if (email != null) {
            listEmailsModel.addElement(new EmailTable(email));
        }
    }//GEN-LAST:event_buttonInserirNovoEmailActionPerformed

    private void buttonRemoverTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverTelefoneActionPerformed
        int selectedIndex = listTelefones.getSelectedIndex();

        if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Telefone\", favor selecionar um telefone para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este telefone da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            listTelefonesModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverTelefoneActionPerformed

    private void buttonRemoverEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverEmailActionPerformed
        int selectedIndex = listEmails.getSelectedIndex();

        if (selectedIndex == -1) {

            JOptionPane.showMessageDialog(
                    null,
                    "Antes de clicar em \"Remover Email\", favor selecionar um email para remover.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja remover este email da lista?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            listEmailsModel.remove(selectedIndex);
        }
    }//GEN-LAST:event_buttonRemoverEmailActionPerformed

    /**
     * checking if the CPF is already present in the comboBox list.
     * this comboBox list has all the clients from the DB, clients that are active and
     * inactive, therefore is the same as searching the DB, but faster.
     *
     * is not nice to have to create a ClientTable object just to compare their CPF
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * CPF attribute, in the ClientTable object.
     *
     * @param cpf
     * @return
     */
    private boolean comboBoxClienteContainsCPF(String cpf) {
        for (int i = 0; i < comboBoxClienteDataList.size(); i++) {
            ClientTable currentClient = (ClientTable) comboBoxClienteDataList.get(i);

            if (!currentClient.isEmptyString()
                    && currentClient.getCpf().equals(cpf)) {

                return true;
            }
        }

        return false;
    }

    /**
     * trimming the fields that are mandatory\obligatory, meaning the fields that have an "*"
     * preceding their label.
     */
    private void trimMandatoryFields() {
        textFieldPrimeiroNome.setText(textFieldPrimeiroNome.getText().trim());
        textFieldSobrenome.setText(textFieldSobrenome.getText().trim());
        textFieldCPF.setText(textFieldCPF.getText().trim());
    }

    /**
     * custom dispose() to ask if the user is sure, close the DB connection and call the main GUI
     * again.
     */
    @Override
    public void dispose() {
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            new GerenciadorDeEmprestimosDeFilmes().setVisible(true);
            super.dispose();
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelarCadastro;
    private javax.swing.JButton buttonFinalizarCadastro;
    private javax.swing.JButton buttonInserirNovoEmail;
    private javax.swing.JButton buttonInserirNovoEndereco;
    private javax.swing.JButton buttonInserirNovoTelefone;
    private javax.swing.JButton buttonRemoverEmail;
    private javax.swing.JButton buttonRemoverEndereco;
    private javax.swing.JButton buttonRemoverTelefone;
    private com.toedter.calendar.JDateChooser dateChooserDataDeNascimento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel labelAnotacoes;
    private javax.swing.JLabel labelCPF;
    private javax.swing.JLabel labelDataDeNascimento;
    private javax.swing.JLabel labelEmails;
    private javax.swing.JLabel labelEnderecos;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelSobrenome;
    private javax.swing.JLabel labelTelefones;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JList<String> listEmails;
    private javax.swing.JList<String> listEnderecos;
    private javax.swing.JList<String> listTelefones;
    private javax.swing.JTextArea textAreaAnotacoes;
    private javax.swing.JTextField textFieldCPF;
    private javax.swing.JTextField textFieldPrimeiroNome;
    private javax.swing.JTextField textFieldSobrenome;
    // End of variables declaration//GEN-END:variables
}
