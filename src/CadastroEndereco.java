/*
 * using dbDesign9
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 * need to call setLocalAlterarCliente or setLocalCadastroCliente before buttonFinalizar, better do
 * it ASAP.
 */
public class CadastroEndereco extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxCidadeEstadoDataList;
    private AutoComboBox comboBoxCidadeEstado;

    private AlterarCliente localAlterarCliente;
    private CadastroCliente localCadastroCliente;

    public CadastroEndereco() {
        comboBoxCidadeEstadoDataList = new Vector();
        comboBoxCidadeEstado = new AutoComboBox(comboBoxCidadeEstadoDataList);

        initComponents();

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //get each city from the DB
        comboBoxCidadeEstadoDataList.add(new CityTable()); //insert the first empty string
        try {
            prepStmt = conn.prepareStatement("SELECT CIT_ID,"
                    + " CIT_NAME,"
                    + " CIT_TB_STATE_ID"
                    + " FROM TB_CITY"
                    + " WHERE CIT_ACTIVE LIKE 1"
                    + " ORDER BY CIT_NAME");
            rs = prepStmt.executeQuery();

            //put each city in the list
            while (rs.next()) {
                comboBoxCidadeEstadoDataList.add(new CityTable(
                        rs.getInt("CIT_ID"),
                        rs.getString("CIT_NAME"),
                        rs.getInt("CIT_TB_STATE_ID")
                ));
            }

            //get the state name for each city
            for (int i = 0; i < comboBoxCidadeEstadoDataList.size(); i++) {
                CityTable currentCity = (CityTable) comboBoxCidadeEstadoDataList.get(i);

                if (!currentCity.isEmptyString()) {
                    prepStmt = conn.prepareStatement("SELECT STA_NAME"
                            + " FROM TB_STATE"
                            + " WHERE STA_ID LIKE ?"); //1
                    prepStmt.setInt(1, currentCity.getTbStateId());
                    currentCity.setStateName(prepStmt.executeQuery().getString("STA_NAME"));
                }
            }

            comboBoxCidadeEstado.setDataList(comboBoxCidadeEstadoDataList);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    /**
     * this is used to later return the address object to the window that's managing the client.
     * through this local object you will be able to call a method in the object that's managing
     * the client, and set a new address object there, which is the 'return' of this GUI. the call
     * to the method is done in the buttonFinalizarCadastroActionPerformed method.
     *
     * @param localAlterarCliente
     */
    public void setLocalAlterarCliente(AlterarCliente localAlterarCliente) {
        this.localAlterarCliente = localAlterarCliente;
    }

    /**
     * this is used to later return the address object to the window that's managing the client.
     * through this local object you will be able to call a method in the object that's managing
     * the client, and set a new address object there, which is the 'return' of this GUI. the call
     * to the method is done in the buttonFinalizarCadastroActionPerformed method.
     *
     * @param localCadastroCliente
     */
    public void setLocalCadastroCliente(CadastroCliente localCadastroCliente) {
        this.localCadastroCliente = localCadastroCliente;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelRua = new javax.swing.JLabel();
        textFieldRua = new javax.swing.JTextField();
        labelNumeroDaResidencia = new javax.swing.JLabel();
        textFieldNumeroDaResidencia = new javax.swing.JTextField();
        labelBairro = new javax.swing.JLabel();
        textFieldBairro = new javax.swing.JTextField();
        labelCidade = new javax.swing.JLabel();
        comboBoxCidadeEstado = new AutoComboBox(comboBoxCidadeEstadoDataList);
        buttonCancelarCadastro = new javax.swing.JButton();
        buttonFinalizarCadastro = new javax.swing.JButton();
        labelTipoDaResidencia = new javax.swing.JLabel();
        textFieldTipoDaResidencia = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(770, 248));

        jPanel1.setPreferredSize(new java.awt.Dimension(770, 248));

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Novo Endereço");

        labelRua.setText("Rua :");

        labelNumeroDaResidencia.setText("Número da Residência :");

        labelBairro.setText("Bairro :");

        labelCidade.setText("* Cidade - Estado :");

        comboBoxCidadeEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCidadeEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCidadeEstadoActionPerformed(evt);
            }
        });

        buttonCancelarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarCadastro.setText("Cancelar Cadastro");
        buttonCancelarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarCadastroActionPerformed(evt);
            }
        });

        buttonFinalizarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarCadastro.setText("Finalizar Cadastro");
        buttonFinalizarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarCadastroActionPerformed(evt);
            }
        });

        labelTipoDaResidencia.setText("Tipo da Residência :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(labelCidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCidadeEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelRua)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldRua))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTipoDaResidencia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldTipoDaResidencia, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(textFieldBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(labelNumeroDaResidencia)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldNumeroDaResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(labelBairro))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCancelarCadastro)
                .addGap(30, 30, 30)
                .addComponent(buttonFinalizarCadastro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRua)
                    .addComponent(textFieldRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumeroDaResidencia)
                    .addComponent(textFieldNumeroDaResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTipoDaResidencia)
                    .addComponent(textFieldTipoDaResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBairro)
                    .addComponent(textFieldBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCidade)
                    .addComponent(comboBoxCidadeEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancelarCadastro)
                    .addComponent(buttonFinalizarCadastro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarCadastroActionPerformed
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            super.dispose();
        }
    }//GEN-LAST:event_buttonCancelarCadastroActionPerformed

    private void comboBoxCidadeEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCidadeEstadoActionPerformed
        //this was intentional, to make sure it's selected.
    }//GEN-LAST:event_comboBoxCidadeEstadoActionPerformed

    /**
     * it makes a call to the insertNewAddress method inside the object that called this GUI, it's
     * like a 'return' from this GUI, the address object that's being passed to the insertNewAddress
     * method has the data that was collected through this GUI.
     *
     * make sure that setLocalAlterarCliente or setLocalCadastroCliente have been called before
     * using this method.
     *
     * @param evt
     */
    private void buttonFinalizarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarCadastroActionPerformed
        comboBoxCidadeEstadoActionPerformed(evt); //to make sure it's selected

        CityTable selectedCidadeEstado = (CityTable) comboBoxCidadeEstado.getSelectedItem();

        if (selectedCidadeEstado.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else {
            AddressTable localAddress = new AddressTable(
                    textFieldRua.getText(),
                    textFieldNumeroDaResidencia.getText(),
                    textFieldTipoDaResidencia.getText(),
                    textFieldBairro.getText(),
                    selectedCidadeEstado.getId(),
                    selectedCidadeEstado.getCityName(),
                    selectedCidadeEstado.getStateName()
            );

            if (localAlterarCliente != null) {
                localAlterarCliente.insertNewAddress(localAddress);

            } else if (localCadastroCliente != null) {
                localCadastroCliente.insertNewAddress(localAddress);
            }

            JOptionPane.showMessageDialog(null, "Novo endereço incluído com sucesso.");
            super.dispose();
        }
    }//GEN-LAST:event_buttonFinalizarCadastroActionPerformed

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroEndereco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroEndereco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroEndereco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroEndereco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroEndereco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelarCadastro;
    private javax.swing.JButton buttonFinalizarCadastro;
//    private javax.swing.JComboBox<CityTable> comboBoxCidadeEstado;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelBairro;
    private javax.swing.JLabel labelCidade;
    private javax.swing.JLabel labelNumeroDaResidencia;
    private javax.swing.JLabel labelRua;
    private javax.swing.JLabel labelTipoDaResidencia;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextField textFieldBairro;
    private javax.swing.JTextField textFieldNumeroDaResidencia;
    private javax.swing.JTextField textFieldRua;
    private javax.swing.JTextField textFieldTipoDaResidencia;
    // End of variables declaration//GEN-END:variables
}
