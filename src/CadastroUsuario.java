/*
 * using dbDesign9
 *
 * login.length() > 3
 * senha.length() > 7
 */

/*
 * i'm only using the comboBoxUsuarioDataList code as a lazy way to check if the DB already has the
 * login, i just copied the code from the AlterarUsuario.java where it was actually used for the
 * comboBox.
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;

public class CadastroUsuario extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    private PreparedStatement prepStmt;
    private ResultSet rs;

    /**
     * Vector is deprecated, but DefaultComboBoxModel uses it internally, and DefaultComboBoxModel
     * is recommended to be used in this situation, so there's no point in using something else here
     * because DefaultComboBoxModel will implement it as a Vector internally.
     */
    private Vector comboBoxUsuarioDataList;
    private Vector comboBoxNovoTipoDeUsuarioDataList;
    private AutoComboBox comboBoxTipoDeUsuario;

    public CadastroUsuario() {
        comboBoxUsuarioDataList = new Vector();
        comboBoxNovoTipoDeUsuarioDataList = new Vector();
        comboBoxTipoDeUsuario = new AutoComboBox(comboBoxNovoTipoDeUsuarioDataList);

        initComponents();

        try {
            conn = DriverManager.getConnection("jdbc:sqlite:local/designedDb.db");
            stmt = conn.createStatement();
            stmt.setQueryTimeout(30);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_LOGIN"
                    + " ORDER BY LOG_LOGIN");
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                comboBoxUsuarioDataList.add(new LoginTable(
                        rs.getInt("LOG_ID"),
                        rs.getString("LOG_LOGIN"),
                        rs.getString("LOG_PASSWORD"),
                        rs.getString("LOG_NOTES"),
                        rs.getInt("LOG_ACTIVE"),
                        rs.getInt("LOG_TB_USER_TYPE_ID")
                ));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //populate comboBoxNovoTipoDeUsuario
        comboBoxNovoTipoDeUsuarioDataList.add(new UserTypeTable()); //insert the first empty string
        try {
            prepStmt = conn.prepareStatement("SELECT *"
                    + " FROM TB_USER_TYPE"
                    + " WHERE USE_TYP_ACTIVE = ?" //1
                    + " ORDER BY USE_TYP_DESCRIPTION");
            prepStmt.setInt(1, 1);
            rs = prepStmt.executeQuery();

            while (rs.next()) {
                comboBoxNovoTipoDeUsuarioDataList.add(new UserTypeTable(
                        rs.getInt("USE_TYP_ID"),
                        rs.getString("USE_TYP_DESCRIPTION"),
                        rs.getString("USE_TYP_NOTES"),
                        rs.getInt("USE_TYP_ACTIVE")
                ));
            }

            comboBoxTipoDeUsuario.setDataList(comboBoxNovoTipoDeUsuarioDataList);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonFinalizarCadastro = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        labelLogin = new javax.swing.JLabel();
        labelSenha = new javax.swing.JLabel();
        textFieldLogin = new javax.swing.JTextField();
        textFieldSenha = new javax.swing.JTextField();
        labelAnotacoes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaAnotacoes = new javax.swing.JTextArea();
        comboBoxTipoDeUsuario = comboBoxTipoDeUsuario = new AutoComboBox(comboBoxNovoTipoDeUsuarioDataList);
        labelTipoDeUsuario = new javax.swing.JLabel();
        buttonCancelarCadastro = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonFinalizarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonFinalizarCadastro.setText("Finalizar Cadastro");
        buttonFinalizarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalizarCadastroActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTitle.setText("Cadastrar Usuário do Sistema");

        labelLogin.setText("* Login :");

        labelSenha.setText("* Senha :");

        labelAnotacoes.setText("Anotações :");

        textAreaAnotacoes.setColumns(20);
        textAreaAnotacoes.setRows(5);
        jScrollPane1.setViewportView(textAreaAnotacoes);

        comboBoxTipoDeUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxTipoDeUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTipoDeUsuarioActionPerformed(evt);
            }
        });

        labelTipoDeUsuario.setText("* Tipo de Usuário :");

        buttonCancelarCadastro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        buttonCancelarCadastro.setText("Cancelar Cadastro");
        buttonCancelarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelLogin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldLogin))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAnotacoes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTipoDeUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxTipoDeUsuario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelSenha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldSenha)))))
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCancelarCadastro)
                .addGap(31, 31, 31)
                .addComponent(buttonFinalizarCadastro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(labelTitle)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLogin)
                    .addComponent(textFieldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSenha)
                    .addComponent(textFieldSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxTipoDeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTipoDeUsuario))
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAnotacoes)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonFinalizarCadastro)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonCancelarCadastro)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonFinalizarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalizarCadastroActionPerformed
        comboBoxTipoDeUsuarioActionPerformed(evt); //to make sure it's selected

        UserTypeTable selectedUserType = (UserTypeTable) comboBoxTipoDeUsuario.getSelectedItem();

        trimMandatoryFields();

        if (textFieldLogin.getText().isEmpty()
                || textFieldSenha.getText().isEmpty()
                || selectedUserType.isEmptyString()) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nOs campos * são obrigatórios!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (textFieldLogin.getText().length() < 4) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nO login precisa ter mais de 3 caracteres!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (textFieldSenha.getText().length() < 8) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nA senha precisa ter mais de 7 caracteres!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (comboBoxUsuarioContainsLogin(textFieldLogin.getText())) {

            JOptionPane.showMessageDialog(
                    null,
                    "ERRO!\nO Login \"" + textFieldLogin.getText() + "\" não está disponível!",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );

        } else if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja finalizar?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                prepStmt = conn.prepareStatement("INSERT INTO TB_LOGIN("
                        + " LOG_LOGIN," //1
                        + " LOG_PASSWORD," //2
                        + " LOG_NOTES," //3
                        + " LOG_TB_USER_TYPE_ID" //4
                        + ") VALUES(?,?,?,?)");
                prepStmt.setString(1, textFieldLogin.getText());
                prepStmt.setString(2, textFieldSenha.getText());
                prepStmt.setString(3, textAreaAnotacoes.getText());
                prepStmt.setInt(4, selectedUserType.getId());
                prepStmt.executeUpdate();

                JOptionPane.showMessageDialog(null, "Cadastro do Usuário bem sucedido.");
                new AdminGerenciadorDeEmprestimosDeFilmes().setVisible(true);
                super.dispose();

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_buttonFinalizarCadastroActionPerformed

    private void buttonCancelarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarCadastroActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelarCadastroActionPerformed

    private void comboBoxTipoDeUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTipoDeUsuarioActionPerformed
        //this was intentional, to make sure it's selected.
    }//GEN-LAST:event_comboBoxTipoDeUsuarioActionPerformed

    /**
     * checking if the login is already present in the comboBox list.
     * this comboBox list has all the logins from the DB, logins that are active and
     * inactive, therefore is the same as searching the DB, but faster.
     *
     * is not nice to have to create a LoginTable object just to compare their login
     * attribute, therefore it wouldn't work if i used a custom equals(), that compares their
     * login attribute, in the LoginTable object.
     *
     * @param login
     * @return
     */
    private boolean comboBoxUsuarioContainsLogin(String login) {
        for (int i = 0; i < comboBoxUsuarioDataList.size(); i++) {
            LoginTable currentLogin = (LoginTable) comboBoxUsuarioDataList.get(i);

            if (!currentLogin.isEmptyString()
                    && currentLogin.getLogin().equals(login)) {

                return true;
            }
        }

        return false;
    }

    /**
     * trimming the fields that are mandatory\obligatory, meaning the fields that have an "*"
     * preceding their label.
     */
    private void trimMandatoryFields() {
        textFieldLogin.setText(textFieldLogin.getText().trim());
        textFieldSenha.setText(textFieldSenha.getText().trim());
    }

    /**
     * custom dispose() to ask if the user is sure, close the DB connection and call the main GUI
     * again.
     */
    @Override
    public void dispose() {
        if (JOptionPane.showOptionDialog(
                null,
                "Tem certeza que deseja sair?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Sim", "Não"},
                "Sim") == JOptionPane.YES_OPTION) {

            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            new AdminGerenciadorDeEmprestimosDeFilmes().setVisible(true);
            super.dispose();
        }
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and
         * feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelarCadastro;
    private javax.swing.JButton buttonFinalizarCadastro;
 //   private javax.swing.JComboBox<String> comboBoxTipoDeUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelAnotacoes;
    private javax.swing.JLabel labelLogin;
    private javax.swing.JLabel labelSenha;
    private javax.swing.JLabel labelTipoDeUsuario;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextArea textAreaAnotacoes;
    private javax.swing.JTextField textFieldLogin;
    private javax.swing.JTextField textFieldSenha;
    // End of variables declaration//GEN-END:variables
}
